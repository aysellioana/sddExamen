#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

typedef struct Vagon Vagon;
typedef struct Nod Nod;
typedef struct LDI LDI;

struct Vagon {
	int numarVagon;
	char* firmaTransport;
	int numarBileteVandute;
	int capacitateVagon;
};

struct Nod {
	Vagon vagon;
	Nod* next;
	Nod* prev;
};

struct LDI {
	Nod* ultim;
	Nod* prim;
};

Vagon initializareVagon(int numarVagon, char* firmaTransport, int numarBileteVandute, int capacitateVagon) {
	Vagon v;
	v.numarVagon = numarVagon;
	v.firmaTransport = (char*)malloc(sizeof(char) * (strlen(firmaTransport) + 1));
	strcpy(v.firmaTransport, firmaTransport);
	v.numarBileteVandute = numarBileteVandute;
	v.capacitateVagon = capacitateVagon;
	return v;
}

void inserareFinal(LDI* lista, Vagon v) {
	Nod* nou = (Nod*)malloc(sizeof(Nod));
	nou->vagon = v;
	nou->next = NULL;
	nou->prev = lista->ultim;
	if (lista->ultim)
	{
		lista->ultim->next = nou;
	}
	else {
		lista->prim = nou;
	}
	lista->ultim = nou;
}

void afisareVagon(Vagon v) {
	printf("Vagonul cu numarul %d de la firma %s a vandut %d din %d bilete.\n", v.numarVagon, v.firmaTransport, v.numarBileteVandute, v.capacitateVagon);
}

void afisareInceputFinal(LDI lista) {
	Nod* nodCurent = lista.prim;
	while (nodCurent)
	{
		afisareVagon(nodCurent->vagon);
		nodCurent = nodCurent->next;
	}
}

void afisareFinalInceput(LDI lista) {
	Nod* nodCurent = lista.ultim;
	while (nodCurent)
	{
		afisareVagon(nodCurent->vagon);
		nodCurent = nodCurent->prev;
	}
}

int determinareMinimBilete(LDI lista) {
	int min = INT_MAX;
	Nod* nodCurent = lista.prim;
	while (nodCurent) {
		if (nodCurent->vagon.numarBileteVandute < min) {
			min = nodCurent->vagon.numarBileteVandute;
		}
		nodCurent = nodCurent->next;
	}
	return min;
}

void stergereMinime(LDI* lista) {
	int min = determinareMinimBilete((*lista));

	Nod* nodCurent = lista->prim;

	while (nodCurent) {
		Nod* nodUrmator = nodCurent->next;
		if (nodCurent->vagon.numarBileteVandute == min) {
			free(nodCurent->vagon.firmaTransport);

			if (nodCurent->prev)
				nodCurent->prev->next = nodCurent->next;
			else
				lista->prim = nodCurent->next;

			if (nodCurent->next)
				nodCurent->next->prev = nodCurent->prev;
			else
				lista->ultim = nodCurent->prev;
			free(nodCurent);
		}
		nodCurent = nodUrmator;
	}
}

void dezalocareLista(LDI* lista) {
	Nod* nodCurent = lista->prim;
	while (nodCurent) {
		Nod* nodUrmator = nodCurent->next;
		free(nodCurent->vagon.firmaTransport);
		free(nodCurent);

		nodCurent = nodUrmator;
	}
	lista->prim = NULL;
	lista->ultim = NULL;
}

int main() {
	/*LDI lista;
	lista.prim = NULL;
	lista.ultim = NULL;

	FILE* f = fopen("fisier.txt", "r");
	if (f)
	{
		char buffer[50];
		while (fgets(buffer, sizeof(buffer), f)) {

			int numarVagon = atoi(buffer);
			fgets(buffer, sizeof(buffer), f);

			char* firma = (char*)malloc(sizeof(char) * (strlen(buffer) + 1));
			strcpy_s(firma, strlen(buffer) + 1, buffer);
			firma[strlen(firma) - 1] = "\0";

			fgets(buffer, sizeof(buffer), f);
			int numarBilete = atoi(buffer);

			fgets(buffer, sizeof(buffer), f);
			int capacitate = atoi(buffer);

			Vagon v = initializareVagon(numarVagon, firma, numarBilete, capacitate);
			inserareFinal(&lista, v);
		}
		fclose(f);
	}
	afisareInceputFinal(lista);
	afisareFinalInceput(lista);

	stergereMinime(&lista);
	afisareInceputFinal(lista);
	dezalocareLista(&lista);*/

	LDI lista;
	lista.prim = NULL;
	lista.ultim = NULL;

	FILE* f = fopen("fisier.txt", "r");
	int n;
	fscanf(f, "%d", &n);
	Vagon v;
	char buffer[30];

	for (int i = 0; i < n; i++)
	{
		fscanf(f, "%d", &v.numarVagon);
		fscanf(f, "%s", buffer);
		v.firmaTransport = (char*)malloc(sizeof(char) * (strlen(buffer) + 1));
		strcpy(v.firmaTransport, buffer);
		fscanf(f, "%d", &v.numarBileteVandute);
		fscanf(f, "%d", &v.capacitateVagon);
		inserareFinal(&lista, v);
	}
	afisareInceputFinal(lista);
}
